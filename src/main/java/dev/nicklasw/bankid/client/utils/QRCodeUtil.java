package dev.nicklasw.bankid.client.utils;

import dev.nicklasw.bankid.exceptions.BankIdException;
import lombok.experimental.UtilityClass;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

@UtilityClass
public class QRCodeUtil {

    /**
     * Generates a QR code.
     * <p>
     * The QR code should be generated by the RP every second using the pattern "bankid.qrStartToken.time.qrAuthCode".
     *
     * @param qrStartToken  from the auth or sign response.
     * @param qrStartSecret from the auth or sign response.
     * @param orderTime     the time in which the auth or sign response was received.
     * @return the qr code
     * @throws BankIdException in case of an error.
     */
    public static String qrCode(final String qrStartToken, final String qrStartSecret, final LocalDateTime orderTime) {
        final String qrTime = Long.toString(orderTime.until(LocalDateTime.now(), ChronoUnit.SECONDS));

        try {
            final Mac mac = Mac.getInstance("HmacSHA256");
            mac.init(new SecretKeySpec(qrStartSecret.getBytes(StandardCharsets.US_ASCII), "HmacSHA256"));
            mac.update(qrTime.getBytes(StandardCharsets.US_ASCII));

            String qrAuthCode = String.format("%064x", new BigInteger(1, mac.doFinal()));

            return String.join(".", "bankid", qrStartToken, qrTime, qrAuthCode);
        } catch (final NoSuchAlgorithmException | InvalidKeyException e) {
            throw new BankIdException("Error occurred during creation of qr code", e);
        }
    }

}

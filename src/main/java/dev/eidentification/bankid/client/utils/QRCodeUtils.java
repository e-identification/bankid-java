package dev.eidentification.bankid.client.utils;

import dev.eidentification.bankid.exceptions.BankIdException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Objects;

/**
 * This class contains utility functions for working with QR codes.
 */
public final class QRCodeUtils {

    private QRCodeUtils() {

    }

    /**
     * Generates a QR code.
     * <p>
     * The QR code should be generated by the RP every second using the pattern "bankid.qrStartToken.time.qrAuthCode".
     *
     * @param qrStartToken  the start token from the auth or sign response.
     * @param qrStartSecret the start secret from the auth or sign response.
     * @param orderTime     the time at which the auth or sign response was received.
     * @return a string representing the generated QR code.
     * @throws NullPointerException if any of the parameters are null
     * @throws BankIdException      if an error occurs during MAC generation.
     */
    public static String qrCode(final String qrStartToken, final String qrStartSecret, final LocalDateTime orderTime) {
        Objects.requireNonNull(qrStartToken);
        Objects.requireNonNull(qrStartSecret);
        Objects.requireNonNull(orderTime);

        final String elapsedTimeInSeconds = calculateElapsedTimeInSeconds(orderTime);
        final String qrAuthCode = generateMac(qrStartSecret, elapsedTimeInSeconds);
        return generateQrCode(qrStartToken, elapsedTimeInSeconds, qrAuthCode);
    }

    private static String calculateElapsedTimeInSeconds(final LocalDateTime orderTime) {
        return Long.toString(orderTime.until(LocalDateTime.now(ZoneId.systemDefault()), ChronoUnit.SECONDS));
    }

    private static String generateQrCode(final String qrStartToken, final String qrTime, final String qrAuthCode) {
        return String.join(".", "bankid", qrStartToken, qrTime, qrAuthCode);
    }

    private static String generateMac(final String secret, final String message) {
        try {
            final Mac mac = Mac.getInstance("HmacSHA256");
            mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.US_ASCII), "HmacSHA256"));
            mac.update(message.getBytes(StandardCharsets.US_ASCII));
            return String.format("%064x", new BigInteger(1, mac.doFinal()));
        } catch (final NoSuchAlgorithmException | InvalidKeyException e) {
            throw new BankIdException("Error occurred during generation of MAC", e);
        }
    }
}
